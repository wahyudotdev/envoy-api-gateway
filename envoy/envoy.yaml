static_resources:
  listeners:
    - name: listener1
      address:
        socket_address: { address: 0.0.0.0, port_value: 8080 }
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                stat_prefix: grpc_json
                codec_type: AUTO
                route_config:
                  name: local_route
                  virtual_hosts:
                    - name: local_service
                      domains: [ "*" ]
                      routes:
                        # NOTE: by default, matching happens based on the gRPC route, and not on the incoming request path.
                        # Reference: https://envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/grpc_json_transcoder_filter#route-configs-for-transcoded-requests
                        - match: { prefix: "/v1/auth" }
                          route: { cluster: auth-service, timeout: 60s }
                        - match: { prefix: "/bookstore.BookStoreService" }
                          route: { cluster: bookstore-service, timeout: 60s }
                        - match: { prefix: "/cart.CartService" }
                          route: { cluster: cart-service, timeout: 60s }

                http_filters:

                  - name: envoy.filters.http.grpc_json_transcoder
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.grpc_json_transcoder.v3.GrpcJsonTranscoder
                      # proto descriptor generated using gen-api-descriptor.sh
                      proto_descriptor: "/etc/envoy/api_descriptor.pb"
                      services: [ "bookstore.BookStoreService", "cart.CartService" ]
                      print_options:
                        add_whitespace: true
                        always_print_primitive_fields: true
                        always_print_enums_as_ints: false
                        preserve_proto_field_names: false

                  - name: envoy.filters.http.jwt_authn
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.jwt_authn.v3.JwtAuthentication
                      providers:
                        auth_provider:
                          local_jwks:
                            # This is configured inside auth-service/helper/jwt.go
                            # 'k' is a JWT secret encoded in base64
                            inline_string: '{"keys": [{"kty": "oct", "alg": "HS256", "k": "ZmU5NzY3ZDVkZDk4OTUyNmQ0NjQ4YjBlM2QyMmNjMTc3ZTEzNTZiZg=="}]}'

                          # After JWT validation, it will create a new header called 'x-user-id' that using 'id' value from decoded JWT claims
                          # We can get these 'x-user-id' value inside gRPC handler using its metadata
                          claim_to_headers:
                            - header_name: x-user-id
                              claim_name: id

                      # Exclude authorization at /v1/auth/*
                      # Beware that rules order is matter
                      rules:
                        - match: { prefix: "/v1/auth" }
                        - match: { prefix: "/" }
                          requires:
                            provider_name: auth_provider

                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router

  clusters:
    - name: auth-service
      type: LOGICAL_DNS
      lb_policy: ROUND_ROBIN
      dns_lookup_family: V4_ONLY
      load_assignment:
        cluster_name: auth-service
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: auth-service
                      port_value: 3000

    - name: bookstore-service
      type: LOGICAL_DNS
      lb_policy: ROUND_ROBIN
      dns_lookup_family: V4_ONLY
      typed_extension_protocol_options:
        envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
          "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
          explicit_http_config:
            http2_protocol_options: { }
      load_assignment:
        cluster_name: grpc
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: bookstore-service
                      port_value: 3000
    - name: cart-service
      type: LOGICAL_DNS
      lb_policy: ROUND_ROBIN
      dns_lookup_family: V4_ONLY
      typed_extension_protocol_options:
        envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
          "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
          explicit_http_config:
            http2_protocol_options: { }
      load_assignment:
        cluster_name: grpc
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: cart-service
                      port_value: 3000
